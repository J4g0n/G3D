#include <GL/glut.h>
#include <GL/glx.h>
#include <stdlib.h>
#include <stdio.h>

/* dimensions de la fenetre */
int width = 600;
int height = 400;

/* coefficient pour la mise à l'echelle */
float coef = 2;
/* coefficient pour la rotation */
float theta1 = 0;
float theta2 = 0;
float theta3 = 0;

//------------------------------------------------------------

typedef struct
{
	float x, y, z;
} Vector;

//------------------------------------------------------------

Vector V_new(float x, float y, float z)
{
	Vector p;
	p.x = x;
	p.y = y;
	p.z = z;
	return p;
}

/*************************************************************************/
/* Fonctions de dessin */
/*************************************************************************/

/* rouge vert bleu entre 0 et 1 */
void chooseRandomColor()
{
	glColor3d(drand48(),drand48(),drand48());
}

//------------------------------------------------------------

void chooseColor(double r, double g, double b)
{
	glColor3d(r,g,b);
}

//------------------------------------------------------------

void drawLine(Vector p1, Vector p2)
{
	glBegin(GL_LINES);
	glVertex3d(p1.x,p1.y,p1.z);
	glVertex3d(p2.x,p2.y,p2.z);
	glEnd();
}

//------------------------------------------------------------

void drawQuad(Vector p1, Vector p2, Vector p3, Vector p4)
{
	// glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	glBegin(GL_QUADS);
	glVertex3f(p1.x,p1.y,p1.z);
	glVertex3f(p2.x,p2.y,p2.z);
	glVertex3f(p3.x,p3.y,p3.z);
	glVertex3f(p4.x,p4.y,p4.z);
	glEnd();
}

//------------------------------------------------------------

void drawCube()
{
	chooseRandomColor();
	drawQuad(V_new(0.5,0.5,0.5),V_new(0.5,0.5,-0.5),
					V_new(0.5,-0.5,-0.5),V_new(0.5,-0.5,0.5));
	chooseRandomColor();
	drawQuad(V_new(0.5,0.5,0.5),V_new(0.5,0.5,-0.5),
					V_new(-0.5,0.5,-0.5),V_new(-0.5,0.5,0.5));
	chooseRandomColor();
	drawQuad(V_new(0.5,0.5,0.5),V_new(-0.5,0.5,0.5),
					V_new(-0.5,-0.5,0.5),V_new(0.5,-0.5,0.5));
	chooseRandomColor();
	drawQuad(V_new(-0.5,-0.5,-0.5),V_new(0.5,-0.5,-0.5),
					V_new(0.5,-0.5,0.5),V_new(-0.5,-0.5,0.5));
	chooseRandomColor();
	drawQuad(V_new(-0.5,-0.5,-0.5),V_new(-0.5,-0.5,0.5),
					V_new(-0.5,0.5,0.5),V_new(-0.5,0.5,-0.5));
	chooseRandomColor();
	drawQuad(V_new(-0.5,-0.5,-0.5),V_new(-0.5,0.5,-0.5),
					V_new(0.5,0.5,-0.5),V_new(0.5,-0.5,-0.5));

}


/*************************************************************************/
/* Fonctions callback */
/*************************************************************************/

void display()
{
	srand48(1); // Seulement pour la couleur aleatoire.

	glEnable(GL_DEPTH_TEST);
	glDepthMask(GL_TRUE);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective( 60, (float)width/height, 1, 100);
	gluLookAt(2,2,4,0,0,0,0,1,0);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();


	// Repere du monde
	chooseRandomColor();
	drawLine(V_new(0,0,0),V_new(1,0,0));
	drawLine(V_new(0,0,0),V_new(0,1,0));
	drawLine(V_new(0,0,0),V_new(0,0,1));
	// Fin repère

	// Définition de transformations eventuelles
	/*glMatrixMode(GL_MODELVIEW);
	glLoadIdentity(); // charge la matrice idéntité
	glRotatef(theta,0,1,0); // defini une rotation
	glTranslatef(0,2,0); // défini un rapport de translation
	glScalef(coef,1,1); // défini une mise a l'échelle*/
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	//torse
	glTranslatef(0.5,0.5,0.5); 
	glPushMatrix();
	glRotatef(theta1,0,1,0);
	glScalef(1,1.5,0.5); 
	drawCube();
	//bras droit
	glPopMatrix();
	glTranslatef(0.75,0.17,0); 
	glRotatef(35,0,0,1);
	glScalef(0.2,1.2,0.3);
	drawCube();
	//bras gauche
	glPopMatrix();
	glTranslatef(-0.75,0.17,0); 
	glRotatef(35,0,0,-1);
	glScalef(0.2,1.2,0.3);
	drawCube();
	glPopMatrix();

/*	glPopMatrix();
	glTranslatef(-0.67,0.1,0); 
	glRotatef(-45,0,0,1);
	glScalef(0.3,0.8,0.8);
	drawCube();
	//tete
	glPopMatrix();
	glTranslatef(0,1,0); 
	glScalef(0.2,0.2,0.2);
	drawCube();*/
	// Fin transformations

	// Affichage du cube
	//drawCube();
	// Fin cube

	glutSwapBuffers();
}

//------------------------------------------------------------

void keyboard(unsigned char keycode, int x, int y)
{
	printf("Touche frapee : %c (code ascii %d)\n",keycode, keycode);
	/* touche ECHAP */
	switch (keycode) {
		case 27: exit(0);
		case 'a': coef+=1; break;
		case 'A': coef-=1; break;
		case 'z': theta1+=10; break;
		case 'Z': theta1-=10; break;
		case 'e': theta2+=10; break;
		case 'E': theta2-=10; break;
		case 'r': theta3+=10; break;
		case 'R': theta3-=10; break;
		default: break;
	}

	glutPostRedisplay();
}

//------------------------------------------------------------

void mouse(int button, int state, int x, int y)
{
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		printf("Clic at %d %d\n",x,y);
		glutPostRedisplay();
	}

}

//------------------------------------------------------------


void idle()
{
	// animation du personnage ici

	glutPostRedisplay();
}

/*************************************************************************/
/* Fonction principale */
/*************************************************************************/

int main(int argc, char *argv[])
{
	/* Initialisations globales */
	glutInit(&argc, argv);

	/* Définition des attributs de la fenetre OpenGL */
	glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);

	/* Placement de la fenetre */
	glutInitWindowSize(width, height);
	glutInitWindowPosition(50, 50);

	/* Création de la fenetre */
	glutCreateWindow("Transformations matricielles");

	/* Choix de la fonction d'affichage */
	glutDisplayFunc(display);

	/* Choix de la fonction de redimensionnement de la fenetre */
	//	glutReshapeFunc(reshape);

	/* Choix des fonctions de gestion du clavier */
	glutKeyboardFunc(keyboard);
	//glutSpecialFunc(special);

	/* Choix de la fonction de gestion de la souris */
	glutMouseFunc(mouse);

	/* Choix de la fonction qui sera appelée
		 lorsqu'il n'y a pas d'autres événements */
	glutIdleFunc(idle);

	/* Boucle principale */
	glutMainLoop();

	/* Même si glutMainLoop ne rends JAMAIS la main,
		 il faut définir le return, sinon
		 le compilateur risque de crier */
	return 0;
}
